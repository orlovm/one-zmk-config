#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>
#include "zmk-helpers/helper.h"

#define DEF 0
#define LWR 1
#define RSE 2
#define ADJ 3

#define QUICK_TAP_MS 200

&lt {
  flavor = "balanced";
  tapping-term-ms = <200>;
  quick-tap-ms = <QUICK_TAP_MS>;
};

/* Homerow mods */
#include "zmk-helpers/key-labels/42.h"  
#define KEYS_L LT0 LT1 LT2 LT3 LT4 LT5 LM0 LM1 LM2 LM3 LM4 LM5 LB0 LB1 LB2 LB3 LB4 LB5
#define KEYS_R RT0 RT1 RT2 RT3 RT4 RT5 RM0 RM1 RM2 RM3 RM4 RM5 RB0 RB1 RB2 RB3 RB4 LB5
#define THUMBS LH2 LH1 LH0 RH0 RH1 RH2


#define MAKE_HRM(NAME, HOLD, TAP, TRIGGER_POS)                                 \
  ZMK_HOLD_TAP(NAME, bindings = <HOLD>, <TAP>; flavor = "balanced";            \
               tapping-term-ms = <280>; quick-tap-ms = <QUICK_TAP_MS>;         \
               require-prior-idle-ms = <175>; hold-trigger-on-release;         \
               hold-trigger-key-positions = <TRIGGER_POS>;)

MAKE_HRM(hml, &kp, &kp, KEYS_R THUMBS) // Left-hand HRMs.
MAKE_HRM(hmr, &kp, &kp, KEYS_L THUMBS) // Right-hand HRMs.

/ {
    conditional_layers {
        compatible = "zmk,conditional-layers";

        tri-layer {
            if-layers = <1 2>;
            then-layer = <3>;
        };
    };

    keymap {
        compatible = "zmk,keymap";

        default_layer {
            bindings = <
&kp RBKT                  &kp Q           &kp W           &kp E          &kp R             &kp T      &kp Y                &kp U              &kp I           &kp O            &kp P               &kp LBKT
&kp ESCAPE                &hml LEFT_ALT A  &hml LEFT_GUI S  &hml LCTRL D    &hml LEFT_SHIFT F  &kp G      &kp H                &hmr RIGHT_SHIFT J  &hmr RCTRL K     &hmr RIGHT_GUI L  &hmr RIGHT_ALT SEMI  &kp SQT
&mt LC(LEFT_SHIFT) GRAVE  &kp Z           &kp X           &kp C          &kp V             &kp B      &kp N                &kp M              &kp COMMA       &kp DOT          &kp FSLH            &kp BACKSLASH
                                                          &mt LCTRL TAB  &lt 1 BACKSPACE   &kp SPACE  &mt LEFT_GUI DELETE  &lt 2 ENTER        &kp LEFT_SHIFT
            >;
        };

        lower_layer {
            bindings = <
&bootloader  &trans  &trans          &kp UP_ARROW    &trans           &trans  &trans  &kp N7        &kp NUMBER_8  &kp N9        &trans  &trans
&sys_reset   &trans  &kp LEFT_ARROW  &kp DOWN_ARROW  &kp RIGHT_ARROW  &trans  &trans  &kp NUMBER_4  &kp N5        &kp NUMBER_6  &trans  &trans
&trans       &trans  &kp K_CUT       &kp K_COPY      &kp K_PASTE      &trans  &kp N0  &kp NUMBER_1  &kp NUMBER_2  &kp NUMBER_3  &trans  &trans
                                     &trans          &trans           &trans  &trans  &trans        &trans
            >;
        };

        raise_layer {
            bindings = <
&trans  &kp F1  &kp F2   &kp F3   &kp F4   &trans  &kp EXCLAMATION  &kp AT_SIGN    &kp HASH      &kp DOLLAR            &kp PERCENT            &bootloader
&trans  &kp F5  &kp F6   &kp F7   &kp F8   &trans  &kp CARET        &kp AMPERSAND  &kp ASTERISK  &kp LEFT_PARENTHESIS  &kp RIGHT_PARENTHESIS  &sys_reset
&trans  &kp F9  &kp F10  &kp F11  &kp F12  &trans  &kp MINUS        &kp UNDER      &kp PLUS      &kp KP_EQUAL          &trans                 &trans
                         &trans   &trans   &trans  &trans           &trans         &trans
            >;
        };

        adjust_layer {
            bindings = <
&bootloader  &none         &kp C_BRIGHTNESS_DEC  &none         &kp C_BRIGHTNESS_INC  &none         &none         &kp C_VOL_DN  &kp K_MUTE    &kp C_VOLUME_UP  &none         &bootloader
&bt BT_CLR   &bt BT_SEL 0  &bt BT_SEL 1          &bt BT_SEL 2  &bt BT_SEL 3          &bt BT_SEL 4  &bt BT_SEL 4  &bt BT_SEL 3  &bt BT_SEL 2  &bt BT_SEL 1     &bt BT_SEL 0  &bt BT_CLR
&sys_reset   &none         &none                 &none         &none                 &none         &none         &none         &none         &none            &none         &sys_reset
                                                 &trans        &none                 &trans        &none         &trans        &trans
            >;
        };
    };
};
